Building pipeline:
1.create git repo and then clone to local repo
2.add src folder along with all components(run them individually)
3.add data, models, reports directories to .gitignore file
4.src folder > data_ingestion.py > data_preprocessing.py > feature_engineering.py > model_building.py > model_evaluation.py
5. after adding all the components
6. In the .gitignore file add data, models, reports folders(because we will use dvc for tracking them)
7.git add.commit and push the remaining code

================================================================
Automate the steps using dvc(without parameters)
1. first initialize dvc "dvc init"
2. then make a "dvc.yaml" file which is used to automate
3. to run the yaml file use "dvc repro"
4. for visualizing the stages use "dvc dag"
5. "dvc.lock file will be created and the id's in it can be used for further"
6. push changes in code to the github

=================================================================
setup parameters
1. create a "params.yaml" file and add the parameters to it
2.add the below code
def load_params(params_path: str) -> dict:
    """Load parameters from a YAML file."""
    try:
        with open(params_path, 'r') as file:
            params = yaml.safe_load(file)
        logger.debug('Parameters retrieved from %s', params_path)
        return params
    except FileNotFoundError:
        logger.error('File not found: %s', params_path)
        raise
    except yaml.YAMLError as e:
        logger.error('YAML error: %s', e)
        raise
    except Exception as e:
        logger.error('Unexpected error: %s', e)
3. do changes in the required .py files with parameters
======================================================================
FOR DOING EXPERIMENT
1. we use the dvclive to track the experiment
2.  change the parameters in params.yaml and run "dvc exp run"
3. we can remove the experiment if i dont need it
4. if i want to apply the good exp code then "dvc exp apply <exp_name>"